// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  password        String
  name            String?
  profilePicture  String?
  bio             String?
  posts           Post[]    
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Tag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  posts PostTag[]
  productTags ProductTag[]
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  tags      PostTag[]     
  productPosts ProductPost[] @relation("ProductPosts", map: "Post_ProductPost_fkey") 
  createdAt DateTime  @default(now())
}

model PostTag {
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  Int

  @@id([postId, tagId])
}

model Product {
  id            Int       @id @default(autoincrement()) 
  name          String    @unique                    
  description   String?                               
  price         Decimal                               
  imageUrl      String?                               
  tags          ProductTag[]    
  productPosts  ProductPost[] @relation("ProductPosts", map: "Product_ProductPost_fkey") 
  createdAt     DateTime  @default(now())                        
}

model ProductTag {
  product  Product @relation(fields: [productId], references: [id], onDelete: Cascade) 
  productId Int
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)    
  tagId     Int

  @@id([productId, tagId]) 
}

model ProductPost {
  product    Product  @relation("ProductPosts", fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  post       Post     @relation("ProductPosts", fields: [postId], references: [id], onDelete: Cascade)
  postId     Int

  @@id([productId, postId]) // 복합 Primary Key 설정
}